package com.packt.ticketportal.domain.repository.impl;

import com.packt.ticketportal.domain.Customer;
import com.packt.ticketportal.domain.HistoryLog;
import com.packt.ticketportal.domain.mappers.IMapResultSetIntoEntity;
import com.packt.ticketportal.domain.repository.IHistoryLogRepository;
import com.packt.ticketportal.domain.repository.RepositoryBase;
import com.packt.ticketportal.domain.unitofwork.IUnitOfWork;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

/**
 * Created by Kuba on 2016-11-29.
 */
public class HistoryLogRepository extends RepositoryBase<HistoryLog> implements IHistoryLogRepository {
    private PreparedStatement selectByCustomer;


    public HistoryLogRepository(Connection connection, IMapResultSetIntoEntity<HistoryLog> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);
    }


    @Override
    protected String tableName() {
        return "historyLog";
    }

    @Override
    protected String createTableSql() {
        return "CREATE TABLE historyLog("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "dateOfTransaction varchar(250),"
                + "customer BIGINT,"
                + "ticket BIGINT,"
                + "amount BIGINT,"
                + "FOREIGN KEY (customer) REFERENCES customer(id),"
                + "FOREIGN KEY (ticket) REFERENCES ticket(id)"
                +")";
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO historyLog(dateOfTransaction,amount,customer,ticket) VALUES(?,?,?,?)";
    }


    @Override
    protected String updateSql() {
        return "UPDATE historyLog set dateOfTransaction=?, amount=?, customer=?, ticket=? WHERE id=?";
    }


    @Override
    protected void setupInsert(HistoryLog entity) throws SQLException {
        insert.setString(1, entity.getDate().toString());
        insert.setInt(2, entity.getAmount());
        insert.setInt(3, entity.getCustomerId());
        insert.setInt(4, entity.getTicketForEventId());

    }

    @Override
    protected void setupUpdate(HistoryLog entity) throws SQLException {
        update.setString(1, entity.getDate().toString());
        update.setInt(2, entity.getAmount());
        update.setInt(3, entity.getCustomerId());
        update.setInt(4, entity.getTicketForEventId());
        update.setInt(5, entity.getId());

    }

    @Override
    public List<HistoryLog> byCustomer(Customer customer) {
        try {
            List<HistoryLog> result = new ArrayList<>();
            selectByCustomer.setInt(1, customer.getId());
            ResultSet rs = selectByCustomer.executeQuery();
            while (rs.next()) {
                result.add(mapper.map(rs));
            }
            return result;
        }catch (SQLException ex ){
            ex.printStackTrace();
        }
        return null;
    }



    private String selectByCustomer() {return "Select * FROM "+ tableName() + " WHERE customer = ?"; }
}
