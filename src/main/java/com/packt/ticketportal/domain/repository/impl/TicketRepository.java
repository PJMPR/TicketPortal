package com.packt.ticketportal.domain.repository.impl;

import com.packt.ticketportal.domain.Ticket;
import com.packt.ticketportal.domain.mappers.IMapResultSetIntoEntity;
import com.packt.ticketportal.domain.repository.ITicketRepository;
import com.packt.ticketportal.domain.repository.RepositoryBase;
import com.packt.ticketportal.domain.unitofwork.IUnitOfWork;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Kuba on 2016-11-17.
 */
public class TicketRepository extends RepositoryBase<Ticket> implements ITicketRepository {

    private PreparedStatement selectByCategory;
    public TicketRepository(Connection connection, IMapResultSetIntoEntity<Ticket> mapper, IUnitOfWork uow){
        super(connection,mapper,uow);
        try{
            selectByCategory = connection.prepareStatement(selectByCategorySQL());
        }catch (SQLException ex){
            ex.printStackTrace();
        }
    }

    @Override
    protected String tableName(){
        return "ticket";

    }

    @Override
    protected String createTableSql(){
        return "CREATE TABLE ticket(" + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "name VARCHAR(30)," + "price DECIMAL," + "ticketDesc VARCHAR(255), " +
                "category VARCHAR(30), " + "inStock BIGINT, " + "location varchar(30),"
                + "customer bigint null,"
                + "FOREIGN KEY (customer) REFERENCES customer(id)"
                +");";
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO ticket(name,price, ticketDesc, category, inStock, location, customer) VALUES(?,?,?,?,?,?,?);";
    }

    @Override
    protected String updateSql() {
        return "UPDATE TICKET set name=?,price=?, ticketDesc=?, category=?, inStock=?, location=?, customer=? WHERE id=?;";
    }


    @Override
    protected void setupInsert(Ticket entity) throws SQLException {
        insert.setString(1, entity.getTicketName());
        insert.setBigDecimal(2, entity.getPrice());
        insert.setString(3,entity.getTicketDesc());
        insert.setString(4,entity.getTicketCat());
        insert.setLong(5,entity.getTicketsInStock());
        insert.setString(6,entity.getLocation());
        insert.setInt(7,entity.getCustomerId());


    }

    @Override
    protected void setupUpdate(Ticket entity) throws SQLException {
        update.setString(1, entity.getTicketName());
        update.setBigDecimal(2, entity.getPrice());
        update.setString(3,entity.getTicketDesc());
        update.setString(4,entity.getTicketCat());
        update.setLong(5,entity.getTicketsInStock());
        update.setString(6,entity.getLocation());
        update.setInt(7,entity.getCustomerId());
        update.setInt(8, entity.getId());

    }

    @Override
    public List<Ticket> byCategory(String category) {
        try{
            List<Ticket> result = new ArrayList<>();
            selectByCategory.setString(1, category);
            ResultSet rs = selectByCategory.executeQuery();
            while (rs.next()){
                result.add(mapper.map(rs));
            }
            return result;
        }catch (SQLException ex){
            ex.printStackTrace();
        }
        return null;
    }

    public String selectByCategorySQL(){
        return "Select * FROM " + tableName() + " where category =?";
    }
}
